ggsave("./data/graphs/supplementary/FigS4_15envdataplot.png",
width = 25,
height = 8,
units = "cm",
dpi = 300 )
ggsave("./data/graphs/supplementary/FigS4_15envdataplot.png",
width = 25,
height = 6,
units = "cm",
dpi = 300 )
ggsave("./data/graphs/supplementary/FigS4_15envdataplot.png",
width = 29,
height = 6,
units = "cm",
dpi = 300 )
envdatall %>%
select_if(is.numeric) %>%
select(-Depth) %>%
cbind(ROV=envdatall$ROV) %>%
pivot_longer(is.numeric) %>%
ggplot(aes(x=value)) +
geom_histogram(bins=10, fill="white", aes(color=name, y=..ndensity..)) +
facet_grid(ROV~name, scales="free_x") +
theme_classic() +
theme(legend.position = "none",
axis.text.y=element_text(size = 7, face ="italic"),
axis.text.x=element_text(size = 7, face ="italic", angle=90),
axis.title = element_blank()) +
scale_color_brewer(palette="Set1")
ggsave("./data/graphs/supplementary/FigS3_15envdataplot.png",
width = 25,
height = 15,
units = "cm",
dpi = 300 )
library(visNetwork)
library(igraph)
library(tidyverse)
library(phyloseq)
igraphnetw <- readRDS("./data/networks/filtered/weighted/BAF_igraphSLR_igraphw.rds")
igraphnet <- readRDS("./data/networks/filtered/nonweighted/BAF_igraphSLR_igraph.rds")
# filter disconnected nodes
igraphnetw <- delete.vertices(igraphnetw, degree(igraphnetw)<2)
igraphnet <- delete.vertices(igraphnet, degree(igraphnet)<2)
edgelist <- as_edgelist(igraphnet) %>% data.frame() %>%
dplyr::rename(from=X1, to=X2) %>%
cbind(get.edge.attribute(igraphnetw)) %>%
mutate(value=weight,
color=if_else(weight>0, "green", "red"))
#### The node table was manually edited to classify trophic modes
#### To verify taxa to higher resolution the represantative
#### sequences were manually BLASTED against the NCBI database
# write.csv(nodedf, "./data/Data/BAFvisNetworknode.csv")
nodedf <- read.csv("./data/Data/BAFvisNetworknode.csv", row.names = 1, na.strings=c("","NA"))
View(nodedf)
View(edgelist)
library(phyloseq)
library(SpiecEasi)
library(tidyverse)
library(ggpubr)
library(corrplot)
### LOAD DATA
BAFslr <- readRDS("./data/networks/raw/BAF/BAF_SpiecEasi_network_nlambda20_lambda.min.ratio0.005_rep.num5_ncores4_stability0.01707_SLR.rds")
BAslr <- readRDS("./data/networks/raw/BA/BA_SpiecEasi_network_nlambda20_lambda.min.ratio0.005_rep.num5_ncores4_stability0.01607_SLR.rds")
Bslr <- readRDS("./data/networks/raw/BA/BA_SpiecEasi_network_nlambda20_lambda.min.ratio0.005_rep.num5_ncores4_stability0.01607_SLR.rds")
BAFphyseq <-  readRDS("./data/Data/physeqcombined.rds")
BAphyseq <-  readRDS("./data/Data/physeq16S_seep_NetREADY_taxprevl_0.5.rds")[[1]]
sampdata <- data.frame(sample_data(BAFphyseq))
### PERFORM ROBUST PCA
myfunc <- function(i,j) mapply(function(a,b) cor.test(mtcars[[a]], mtcars[[b]])$p.value, i, j)
# Bacterial-Archaeal-Fungal network
XBAF <- BAFslr$est$data
LBAF <- BAFslr$est$resid[[getOptInd(BAFslr)]]
rownames(LBAF) <- colnames(XBAF)
colnames(LBAF) <- colnames(XBAF)
Lsvd <- svd(LBAF)
ind <- Lsvd$d > 1e-09
loadings <- diag(sqrt(1/Lsvd$d[ind])) %*% t(Lsvd$v[,
ind])
varexplained <- (Lsvd$d^2/sum(Lsvd$d^2))[Lsvd$d > 1e-09]
plot(Lsvd$d^2/sum(Lsvd$d^2), xlim = c(0, length(Lsvd$d)), type = "b", pch = 16, xlab = "principal components",
ylab = "variance explained")
scores <- XBAF %*% t(loadings)
pcaBAF <- list(scores = scores, loadings = loadings,
varexpl = varexplained)
plotdfBAF <- data.frame(sampdata,
`Sequencing Depth` = rowSums(otu_table(BAFphyseq)/1000),
PCA = pcaBAF$scores) %>%
rename_all(function(x) str_replace_all(x, "A\\.", "")) %>%
rename(`Sampling Depth (m)` = Depth) %>%
mutate(Methane= Methane/1000)
plotdfnumBAF <- plotdfBAF %>%
select_if(is.numeric) %>%
select(-PC13, -PC12) %>%
drop_na()
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))
corrplot(pvaldfBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = corresBAF, insig = "blank")
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))
corrplot(pvaldfBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "blank")
pvaldfBAF
corrplot(pvaldfBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
plotdfnumBAF
plotdfnumBAF <- plotdfBAF %>%
select_if(is.numeric) %>%
select(-PC13, -PC12) %>%
drop_na()
View(plotdfnumBAF)
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))
corrplot(pvaldfBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corrplot(corresBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))
corrplot(corresBAF, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
# select_if(grepl("PC", names(plotdfnumBAF))) %>%
# filter(!grepl("PC", rownames(.))) %>%
as.matrix()
View(corresBAF)
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
select_if(grepl("PC", names(plotdfnumBAF)))
View(pvaldfBAF)
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame()
outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF)))
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.)))
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.)))
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
View(pvaldfBAF)
View(corresBAF)
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,, insig = "pch")
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>% as.matrix()
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "blank")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
# Bacterial-Archaeal network
XBA <- BAslr$est$data
LBA <- BAslr$est$resid[[getOptInd(BAslr)]]
rownames(LBA) <- colnames(XBA)
colnames(LBA) <- colnames(XBA)
Lsvd <- svd(LBA)
ind <- Lsvd$d > 1e-09
loadings <- diag(sqrt(1/Lsvd$d[ind])) %*% t(Lsvd$v[,
ind])
varexplained <- (Lsvd$d^2/sum(Lsvd$d^2))[Lsvd$d > 1e-09]
plot(Lsvd$d^2/sum(Lsvd$d^2), xlim = c(0, length(Lsvd$d)), type = "b", pch = 16, xlab = "principal components",
ylab = "variance explained")
scores <- XBA %*% t(loadings)
pcaBA <- list(scores = scores, loadings = loadings,
varexpl = varexplained)
plotdfBA <- data.frame(sampdata,
`Sequencing Depth` = rowSums(otu_table(BAphyseq)/1000),
PCA = pcaBA$scores) %>%
rename_all(function(x) str_replace_all(x, "A\\.", "")) %>%
rename(`Sampling Depth (m)` = Depth) %>%
mutate(Methane= Methane/1000)
plotdfnumBA <- plotdfBA %>%
select_if(is.numeric) %>%
select(-PC13, -PC12) %>%
drop_na()
corresBA <- data.frame(cor(plotdfnumBA)) %>%
select_if(grepl("PC", names(plotdfnumBA))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
corresBA <- data.frame(cor(plotdfnumBA)) %>%
select_if(grepl("PC", names(plotdfnumBA))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBA <- outer(plotdfnumBA, plotdfnumBA, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBA))) %>%
filter(!grepl("PC", rownames(.))) %>% as.matrix()
corrplot(corresBA, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBA, insig = "blank")
corrplot(corresBA, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBA, insig = "blank")
corrplot(corresBA, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBA, insig = "pch")
plotdfnumBA
plotdfnumBA %>%
ggplot(aes(x=PC1, y=Methane)) +
geom_point()
plotdfnumBAF %>%
ggplot(aes(x=PC1, y=Methane)) +
geom_point()
avgDepth0Meth <- sampledf %>%
filter(Depth==0) %>%
pull(Methane) %>%
max()
avgDepth0Meth <- sampdata %>%
filter(Depth==0) %>%
pull(Methane) %>%
max()
sampdata <- sampledf %>%
mutate(MethLev = as.factor(if_else(Methane<=avgDepth0Meth, "Low", "High")))
sampdata <- sampdata %>%
mutate(MethLev = as.factor(if_else(Methane<=avgDepth0Meth, "Low", "High")))
sampdata$MethLev
avgDepth0Meth <- sampdata %>%
filter(Depth==0) %>%
pull(Methane) %>%
max()
sampdata <- sampdata %>%
mutate(MethLev = as.factor(if_else(Methane<=avgDepth0Meth, "Low", "High")))
### PERFORM ROBUST PCA
myfunc <- function(i,j) mapply(function(a,b) cor.test(mtcars[[a]], mtcars[[b]])$p.value, i, j)
# Bacterial-Archaeal-Fungal network
XBAF <- BAFslr$est$data
LBAF <- BAFslr$est$resid[[getOptInd(BAFslr)]]
rownames(LBAF) <- colnames(XBAF)
colnames(LBAF) <- colnames(XBAF)
Lsvd <- svd(LBAF)
ind <- Lsvd$d > 1e-09
loadings <- diag(sqrt(1/Lsvd$d[ind])) %*% t(Lsvd$v[,
ind])
varexplained <- (Lsvd$d^2/sum(Lsvd$d^2))[Lsvd$d > 1e-09]
plot(Lsvd$d^2/sum(Lsvd$d^2), xlim = c(0, length(Lsvd$d)), type = "b", pch = 16, xlab = "principal components",
ylab = "variance explained")
scores <- XBAF %*% t(loadings)
pcaBAF <- list(scores = scores, loadings = loadings,
varexpl = varexplained)
plotdfBAF <- data.frame(sampdata,
`Sequencing Depth` = rowSums(otu_table(BAFphyseq)/1000),
PCA = pcaBAF$scores) %>%
rename_all(function(x) str_replace_all(x, "A\\.", "")) %>%
rename(`Sampling Depth (m)` = Depth) %>%
mutate(Methane= Methane/1000)
plotdfnumBAF <- plotdfBAF %>%
select_if(is.numeric) %>%
select(-PC13, -PC12) %>%
drop_na()
corresBAF <- data.frame(cor(plotdfnumBAF)) %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBAF <- outer(plotdfnumBAF, plotdfnumBAF, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBAF))) %>%
filter(!grepl("PC", rownames(.))) %>% as.matrix()
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
# Bacterial-Archaeal network
XBA <- BAslr$est$data
LBA <- BAslr$est$resid[[getOptInd(BAslr)]]
rownames(LBA) <- colnames(XBA)
colnames(LBA) <- colnames(XBA)
Lsvd <- svd(LBA)
ind <- Lsvd$d > 1e-09
loadings <- diag(sqrt(1/Lsvd$d[ind])) %*% t(Lsvd$v[,
ind])
varexplained <- (Lsvd$d^2/sum(Lsvd$d^2))[Lsvd$d > 1e-09]
plot(Lsvd$d^2/sum(Lsvd$d^2), xlim = c(0, length(Lsvd$d)), type = "b", pch = 16, xlab = "principal components",
ylab = "variance explained")
scores <- XBA %*% t(loadings)
pcaBA <- list(scores = scores, loadings = loadings,
varexpl = varexplained)
plotdfBA <- data.frame(sampdata,
`Sequencing Depth` = rowSums(otu_table(BAphyseq)/1000),
PCA = pcaBA$scores) %>%
rename_all(function(x) str_replace_all(x, "A\\.", "")) %>%
rename(`Sampling Depth (m)` = Depth) %>%
mutate(Methane= Methane/1000)
plotdfnumBA <- plotdfBA %>%
select_if(is.numeric) %>%
select(-PC13, -PC12) %>%
drop_na()
corresBA <- data.frame(cor(plotdfnumBA)) %>%
select_if(grepl("PC", names(plotdfnumBA))) %>%
filter(!grepl("PC", rownames(.))) %>%
as.matrix()
pvaldfBA <- outer(plotdfnumBA, plotdfnumBA, Vectorize(function(a, b) cor.test(a, b)$p.value))  %>%
as.data.frame() %>%
select_if(grepl("PC", names(plotdfnumBA))) %>%
filter(!grepl("PC", rownames(.))) %>% as.matrix()
corrplot(corresBA, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBA, insig = "pch")
plotdfnumBAF %>%
ggplot(aes(x=PC1, y=Methane)) +
geom_point()
plotdfnumBAF %>%
ggplot(aes(x=PC1, y=MethLev)) +
geom_point()
plotdfBAF %>%
ggplot(aes(x=PC1, y=MethLev)) +
geom_point()
plotdfBAF %>%
ggplot(aes(x=MethLev, y=PC1)) +
geom_point()
plotdfBA %>%
ggplot(aes(x=MethLev, y=PC1)) +
geom_point()
plotdfBAF %>%
ggplot(aes(x=MethLev, y=PC3)) +
geom_point()
plotdfBAF %>%
ggplot(aes(x=MethLev, y=PC3)) +
geom_boxplot()
plotdfBA %>%
ggplot(aes(x=MethLev, y=PC3)) +
geom_boxplot()
corrplot(corresBA, type = "full",method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBA, insig = "pch")
corrplot(corresBAF, type = "full", method = 'circle',
tl.col = "black", tl.srt = 45, number.cex=0.5, tl.cex=0.5,
p.mat = pvaldfBAF, insig = "pch")
library(selbal)
library(phyloseq)
library(tidyverse)
library(metagMisc)
library(grid)
library(ggpubr)
set.seed(1234)
#### LOAD DATA ####
physeq <- readRDS("./data/Data/physeq18SFungi.rds")
physeq.filt <- phyloseq_filter_prevalence(physeq,
prev.trh = 0.1,
abund.trh = NULL,
threshold_condition = "OR",
abund.type = "total")
taxdf <- data.frame(tax_table(physeq.filt))
otumat <- as.matrix(data.frame(otu_table(physeq.filt)))
sampledf <- data.frame(sample_data(physeq.filt)) %>% mutate(Methane = Methane/1000)
methane <- as.numeric(sampledf[,"Methane"])
avgDepth0Meth <- sampledf %>%
filter(Depth==0) %>%
pull(Methane) %>%
max()
methlev <- sampledf %>%
mutate(MethLev = if_else(Methane<=avgDepth0Meth, "Low", "High")) %>%
pull(MethLev) %>% as.factor()
ROVcov <- sampledf %>% dplyr::mutate(ROV=as.factor(ROV)) %>% dplyr::select(ROV)
selbalmod <- selbal.cv(x = otumat,
y = methlev,
n.fold = 5,
n.iter = 2000,
logit.acc = "AUC")
#### LOAD DATA ####
physeq16S <- readRDS('./data/Data/physeq16S.rds')
physeq18S <- readRDS('./data/Data/physeq18SFungi.rds')
physeq18SROV <- merge_samples(physeq18S, "ROV")
physeq16SROV <- merge_samples(physeq16S, "ROV")
tax16S <- data.frame(tax_table(physeq16S))
tax18S <- data.frame(tax_table(physeq18S))
metadata <- data.frame(sample_data(physeq16S))
metadata %>%
group_by(ROV) %>%
summarize(n=n())
metadata %>%
dplyr::group_by(ROV) %>%
dplyr::summarize(n=n())
# metadata
sampledataplotraw <- data.frame(sample_data(physeq16S)) %>%
as.data.frame() %>%
mutate(SampleID = rownames(.))
features <- colnames(sampledataplotraw) %>% as.data.frame()
### 16S
# inext16S <- iNEXT(t(otu16SROV),
#                   q=c(0,1,2),# hill number diversity order
#                   datatype="abundance",
#                   nboot=100,
#                   se = FALSE,
#                   conf = 0.95)
#
# saveRDS(inext16S, "./data/Data/ROVrarecurveiNEXT16S.rds")
inext16S <- readRDS("./data/Data/ROVrarecurveiNEXT16S.rds")
plotdf16S <- inext16S$iNextEst$size_based %>% mutate(m = m/10000,
qD = qD/1000)  %>%
filter(Order.q == 0)
observed16S <- plotdf16S %>% filter(Method == "Observed")
extrapolate16S <- plotdf16S %>% filter(Method == "Extrapolation")
### 18S
# inext18S <- iNEXT(t(otu18SROV),
#                   q=c(0,1,2),# hill number diversity order
#                   datatype="abundance",
#                   nboot=100,
#                   se = TRUE,
#                   conf = 0.95)
# saveRDS(inext18S, "./data/Data/ROVrarecurveiNEXT18S.rds")
inext18S <- readRDS("./data/Data/ROVrarecurveiNEXT18S.rds")
plotdf18S <- inext18S$iNextEst$size_based %>% mutate(m = m/10000,
qD = qD/1000)  %>%
filter(Order.q == 0)
observed18S <- plotdf18S %>% filter(Method == "Observed")
extrapolate18S <- plotdf18S %>% filter(Method == "Extrapolation")
#### PLOT ROV BASED COMBINED ####
plotdf <- rbind(cbind(plotdf16S, Group="16S"), cbind(plotdf18S, Group="18S Fungi")) %>%
mutate(Group = factor(Group, levels=c("18S Fungi", "16S")))
plotext <- rbind(cbind(extrapolate16S, Group="16S"), cbind(extrapolate18S, Group="18S Fungi")) %>%
mutate(Group = factor(Group, levels=c("18S Fungi", "16S")))
plotobs <- rbind(cbind(observed16S, Group="16S"), cbind(observed18S, Group="18S Fungi")) %>%
mutate(Group = factor(Group, levels=c("18S Fungi", "16S")))
scales_y <- list(
`16S` = scale_y_continuous(limits = c(0, 27)),
`18S Fungi` = scale_y_continuous(limits = c(0, 1.5))
)
plotdf %>%
filter(Method == "Rarefaction") %>%
mutate(Group = factor(Group, levels=c("18S Fungi", "16S"))) %>%
ggplot(aes(x = m, y = qD, group = Assemblage)) +
geom_line(color = "grey", size = 0.40, linetype="solid") +
geom_line(data = plotext, aes(x = m, y=qD, group=Assemblage, color = Assemblage),
size = 0.90, linetype="dashed") +
geom_point(data = plotobs, aes(x = m, y = qD), size =1,
color = "blue") +
geom_text(data = plotobs, aes(x = m, y = qD, label = Assemblage, color = Assemblage),
size = 4, hjust=-1.5, vjust=-1, fontface="bold") +
geom_text(data = plotobs, aes(x = m, y = qD),
label = "OBSERVED", size = 2, vjust=-1) +
facet_wrap(~Group, scales = "free", nrow = 2, strip.position="top") +
theme_bw() +
theme(strip.background=element_rect(fill="grey95", color="white"),
strip.text=element_text(face = "bold.italic", size = 12),
axis.title.x=element_text(face="bold", size=11, vjust=-3),
axis.title.y=element_text(face="bold", size=11, vjust=4),
axis.text=element_text(size = 9, face ="bold"),
legend.text=element_text(size = 6, face="bold"),
legend.background=element_blank(),
legend.title=element_text(size=6, face="bold"),
legend.position="none",
panel.border=element_rect(colour="black", size = 1),
panel.background=element_blank(),
plot.background=element_blank(),
plot.margin=unit(c(0.5,1,1,1), "cm"),
panel.grid=element_line(color="grey95"),
panel.grid.minor=element_line(color="grey95"))  +
# expand_limits(y=c(0,27)) +
scale_color_brewer(palette="Set1") +
xlab("Sequences Sampled (x10,000)") +
scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.15)),
position="left") +
ylab("Richness (x1000)")
